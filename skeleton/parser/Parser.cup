package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS,TIMES, LPAREN, RPAREN, RETURN, SEMICOLON, UMINUS,
         INT, LCURLY, RCURLY, ASSIGN, IF, ELSE, PRINT,
         GE, GT, LE, LT, NE, EQ, AND, OR, NOT;
terminal Long    INTCONST;
terminal String IDENT;

non terminal Program         program;
non terminal Stmt            stmt;
non terminal StmtList        stmtList;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal Cond            cond;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left GE, LE, GT, LT, EQ, NE;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
precedence left ELSE;

start with program;

program ::= INT IDENT LPAREN INT IDENT:argName RPAREN LCURLY stmtList:sl RCURLY
            {: RESULT = new Program(argName, sl , loc(argNameleft, argNameright)); :}
         ;
       
stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl , loc(sleft, sright)); :}
            | /*empty string */
            {: RESULT = null; :}
            ;
      
stmt ::= INT IDENT:varName ASSIGN expr:e SEMICOLON
            {: RESULT = new DeclStmt(varName, e , loc(varNameleft, varNameright)); :}
         | IF LPAREN cond:c RPAREN stmt:s
            {: RESULT = new IfStmt(c, s, null, loc(cleft,cright)); :}
         | IF LPAREN cond:c RPAREN stmt:s1 ELSE stmt:s2
            {: RESULT = new IfStmt(c, s1, s2, loc(cleft,cright)); :}
         | PRINT expr:e SEMICOLON
            {: RESULT = new PrintStmt(e, loc(eleft, eright)); :}
         |  RETURN expr:e SEMICOLON
            {: RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
         |  LCURLY stmtList:sl RCURLY
            {: RESULT = sl; :}
         ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      | IDENT: varName
         {: RESULT = new IdentExpr(varName, loc(varNameleft,varNameright)); :}
      | MINUS expr:e
         {: RESULT = new UnaryMinusExpr(e, loc(eleft, eright)); :}
         %prec UMINUS
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;

cond ::= expr:e1 LE expr:e2
         {: RESULT = new CompCond(e1, CompCond.LE, e2, loc(e1left,e1right)); :}
      | expr:e1 GE expr:e2
         {: RESULT = new CompCond(e1, CompCond.GE, e2, loc(e1left,e1right)); :}
      | expr:e1 LT expr:e2
         {: RESULT = new CompCond(e1, CompCond.LT, e2, loc(e1left,e1right)); :}
      | expr:e1 GT expr:e2
         {: RESULT = new CompCond(e1, CompCond.GT, e2, loc(e1left,e1right)); :}
      | expr:e1 EQ expr:e2
         {: RESULT = new CompCond(e1, CompCond.EQ, e2, loc(e1left,e1right)); :}
      | expr:e1 NE expr:e2
         {: RESULT = new CompCond(e1, CompCond.NE, e2, loc(e1left,e1right)); :}
      | cond:e1 AND cond:e2
         {: RESULT = new LogicalCond(e1, LogicalCond.AND, e2, loc(e1left,e1right)); :}
      | cond:e1 OR cond:e2
         {: RESULT = new LogicalCond(e1, LogicalCond.OR, e2, loc(e1left,e1right)); :}
      | NOT cond:e
         {: RESULT = new LogicalCond(e, LogicalCond.NOT, null, loc(eleft,eright)); :}
      | LPAREN cond:c RPAREN
         {: RESULT = c; :}
      ;